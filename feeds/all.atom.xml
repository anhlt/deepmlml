<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Random Thoughts</title><link href="https://deepmlml.com/" rel="alternate"></link><link href="https://deepmlml.com/feeds/all.atom.xml" rel="self"></link><id>https://deepmlml.com/</id><updated>2021-01-21T12:17:14+09:00</updated><subtitle>✨ Suy nghĩ vu vơ</subtitle><entry><title>Tôi đã xin việc tại Paypay như thế nào.</title><link href="https://deepmlml.com/toi-da-xin-viec-tai-paypay-nhu-the-nao.html" rel="alternate"></link><published>2021-01-21T12:17:14+09:00</published><updated>2021-01-21T12:17:14+09:00</updated><author><name>h4cker</name></author><id>tag:deepmlml.com,2021-01-21:/toi-da-xin-viec-tai-paypay-nhu-the-nao.html</id><summary type="html">&lt;p&gt;Quá trình chuẩn bị xin việc, làm gì để vào Paypay&lt;/p&gt;</summary><content type="html">&lt;p&gt;2020 là một năm thật khó quên đối với bản thân tôi, dịch bệnh bao trùm, việc chuyển môi trường làm việc từ văn phòng về gia đình, tình hình kinh doanh hiện tại của công ty không tốt, làm tôi cũng phải suy nghĩ nhiều hơn về công việc của mình. Nói chung, đối với những người làm việc ở Nhật đã lâu, thì tôi cũng có một xuất phát điểm rất bình thường, kỹ năng kỹ thuật cũng không quá xuất sắc. Từ trước đến nay , việc xin việc vào những cty lớn như Rakuten, Softbank, Paypay, Yahoo luôn luôn là một cái gì đó xa vời đối với bản thân. Vì thế câu chuyện xin việc của tôi hi vọng sẽ giúp các bạn tự tin hơn, cố gắng hơn.&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#kinh-nghiem-lam-viec-trinh-o-hoc-van"&gt;Kinh nghiệm làm việc, trình độ học vấn.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#qua-trinh-chuan-bi"&gt;Quá trình chuẩn bị&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#cam-hung-ong-luc"&gt;Cảm hứng, động lực&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#luyen-tap-cau-truc-du-lieu-va-giai-thuat"&gt;Luyện tập cấu trúc dữ liệu và giải thuật&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chuan-bi-kien-thuc"&gt;Chuẩn bị kiến thức&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chuan-bi-resume-linkedin"&gt;Chuẩn bị resume, Linkedin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tim-hieu-ky-ve-nhung-cty-inh-phong-van"&gt;Tìm hiểu kỹ về những cty định phỏng vấn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tim-hieu-ve-range-luong-o-tung-cty-nam-kinh-nghiem"&gt;Tìm hiểu về range lương ở từng cty, năm kinh nghiệm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#agent-nen-hay-khong-nen"&gt;Agent nên hay không nên.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#qua-trinh-phong-van"&gt;Quá trình phỏng vấn&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#thu-phong-van-voi-nhieu-cty-nho-nhung-co-quy-trinh-phong-van-tot"&gt;Thử phỏng vấn với nhiều cty nhỏ, nhưng có quy trình phỏng vấn tốt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#phong-van-nhung-cty-theo-thu-tu"&gt;Phỏng vấn những cty theo thứ tự&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cach-timming-e-cac-cong-ty-ra-cung-ket-qua"&gt;Cách timming để các công ty ra cùng kết quả&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#qua-trinh-deal-luong"&gt;Quá trình deal lương.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="kinh-nghiem-lam-viec-trinh-o-hoc-van"&gt;Kinh nghiệm làm việc, trình độ học vấn.&lt;/h1&gt;
&lt;p&gt;Tôi tốt nghiệp đại học chuyên ngành CNTT tại Việt Nam năm 2014, bằng khá, ngoại ngữ không hề tốt. Thời điểm sang Nhật, tôi chỉ có N3, nói tiếng Nhật rất chán. Suốt 1 năm đầu ở Nhật thì tôi hầu như không hiểu các bạn cùng cty nói gì, mãi 3 năm sau tôi mới có N2. Nói chung là 6 năm ở Nhật nhưng khả năng ngôn ngữ Nhật của tôi rất chán.&lt;/p&gt;
&lt;p&gt;Ở Nhật nhưng lại thích dùng tiếng Anh, tôi nghe, đọc, hiểu tiếng Anh ở mức khá tốt, hiểu được những ngữ cảnh phức tạp, lượng từ vựng tiếng Anh lớn hơn tiếng Nhật rất nhiều. Nhưng tôi nói tiếng Anh lại không tốt, vì ngữ điệu sai từ bé.
Chứng chỉ tiếng Anh duy nhất tôi có là 900 Toeic, không đi học thêm, chỉ mua sách về đọc, làm đề. &lt;/p&gt;
&lt;p&gt;Về kỹ thuật,3 năm đầu tiên tôi làm trong một cty về marketing, công việc rất nhàn, bảo trì một số dự án cũ, thi thoảng phát triển thêm một số dự án mới. Tech-stack là PHP, MySQL, Jquery, Javascipt, Laravel. Tôi không có nhiều cơ hội để được tiếp xúc với việc tối ưu hóa hệ thống, cũng không có nhiều kiến thức về lập trình.&lt;/p&gt;
&lt;p&gt;Sau đó tôi chuyển sang cty thứ 2 làm start-up, nơi này là nới giúp tôi học được nhiều hơn, vì số lượng kỹ sư rất ít, việc gì cũng đến tay. Lượng người dùng cũng khá đông, cũng được khoảng 2M và vẫn đang tăng đều. Môi trường này giúp tôi học được nhiều hơn, đầu tiên là Scala, Synchronous, Asyncronous, Kafka, Actor Model.
Học được nhiều nên tôi cũng có chút tự tin hơn về kỹ thuật, so với 3 năm trước.  &lt;/p&gt;
&lt;p&gt;Đến đây, các bạn có thể thấy là xuất phát điểm của tôi không hề cao, phải nói là bình thường, trung bình khá. Tôi cũng chưa bao giờ mơ mộng vào được các cty lớn của Nhật như Line, Yahoo, Rakuten.&lt;/p&gt;
&lt;h1 id="qua-trinh-chuan-bi"&gt;Quá trình chuẩn bị&lt;/h1&gt;
&lt;h2 id="cam-hung-ong-luc"&gt;Cảm hứng, động lực&lt;/h2&gt;
&lt;p&gt;Tôi biết tôi là người hay nản, đã nhiều lần tôi quyết tâm học cấu trúc dữ liệu và giải thuật nhưng chỉ 2 hôm thấy khó quá là bỏ. Lần này có chút quyết tâm hơn nhờ tham gia vào 1 nhóm kỹ sư người Việt tại Nhật, nghe những người thành công nói chuyện cũng giúp tôi lần này có nhiều động lực hơn. Tôi cũng đặt mục tiêu là vào Google cho nó oai, tính rồi sau này không đạt được google thì vào cty tier-2 cũng được.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.facebook.com/groups/693573337869956"&gt;Vietnam Japan Software Engineer Community&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="luyen-tap-cau-truc-du-lieu-va-giai-thuat"&gt;Luyện tập cấu trúc dữ liệu và giải thuật&lt;/h2&gt;
&lt;p&gt;Tôi bắt đầu luyện tập Leetcode từ đầu tháng 8 năm 2020. Thời điểm đó, mình lập trình bài quicksort hết 2 tiếng, giải bài có độ khó medium thì mất 2 tiếng.&lt;/p&gt;
&lt;p&gt;Mỗi ngày tôi luyện từ 2 đến 3 bài Medium và Hard, để giữ dc động lực thì tôi cố gắng chia sẻ việc mình làm với người xung quanh, lỡ có lười thì cũng thấy xấu hổ mà làm tiếp.&lt;/p&gt;
&lt;h2 id="chuan-bi-kien-thuc"&gt;Chuẩn bị kiến thức&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://amzn.to/3iAPxZO"&gt;Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="chuan-bi-resume-linkedin"&gt;Chuẩn bị resume, Linkedin&lt;/h2&gt;
&lt;p&gt;Chuẩn bị resume và linkedin rất quan trọng, tôi có 2 bản resume, một bản là tự viết, đem đi gửi 5 cty thì 4 cty không cho qua vòng hồ sơ cũng không reply, 1 cty trả lời là tao rất tiếc mày không đủ trình độ.&lt;/p&gt;
&lt;p&gt;Tôi phải lên nhờ bạn tôi viết lại hộ, sau đó mới rút được công thức như sau&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;Mỗi công ty nếu đã làm quá 3 năm thì phải viết được ít nhất 5 dòng.&lt;/span&gt;
&lt;span class="err"&gt;Nội dung mỗi dòng khoảng 5 câu, thể hiện được, bạn đã giải quyết vấn đề gì, kết quả công việc như thế nào, và&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="tim-hieu-ky-ve-nhung-cty-inh-phong-van"&gt;Tìm hiểu kỹ về những cty định phỏng vấn&lt;/h2&gt;
&lt;h2 id="tim-hieu-ve-range-luong-o-tung-cty-nam-kinh-nghiem"&gt;Tìm hiểu về range lương ở từng cty, năm kinh nghiệm&lt;/h2&gt;
&lt;h2 id="agent-nen-hay-khong-nen"&gt;Agent nên hay không nên.&lt;/h2&gt;
&lt;h1 id="qua-trinh-phong-van"&gt;Quá trình phỏng vấn&lt;/h1&gt;
&lt;h2 id="thu-phong-van-voi-nhieu-cty-nho-nhung-co-quy-trinh-phong-van-tot"&gt;Thử phỏng vấn với nhiều cty nhỏ, nhưng có quy trình phỏng vấn tốt&lt;/h2&gt;
&lt;h2 id="phong-van-nhung-cty-theo-thu-tu"&gt;Phỏng vấn những cty theo thứ tự&lt;/h2&gt;
&lt;h2 id="cach-timming-e-cac-cong-ty-ra-cung-ket-qua"&gt;Cách timming để các công ty ra cùng kết quả&lt;/h2&gt;
&lt;h1 id="qua-trinh-deal-luong"&gt;Quá trình deal lương.&lt;/h1&gt;</content><category term="Interview"></category><category term="Interview"></category><category term="Paypay"></category><category term="Exawizard"></category><category term="TRI-AD"></category><category term="Smartnews"></category></entry><entry><title>Nodejs eventloop hoạt động như thế nào, Libuv, epoll</title><link href="https://deepmlml.com/nodejs-eventloop-hoat-dong-nhu-the-nao-libuv-epoll.html" rel="alternate"></link><published>2020-12-28T12:17:14+09:00</published><updated>2020-12-28T12:17:14+09:00</updated><author><name>h4cker</name></author><id>tag:deepmlml.com,2020-12-28:/nodejs-eventloop-hoat-dong-nhu-the-nao-libuv-epoll.html</id><summary type="html">&lt;p&gt;Libuv , epoll hoạt động như thế nào&lt;/p&gt;</summary><content type="html">&lt;p&gt;Một ngày cuối năm đẹp trời, tôi bị đứa bạn thân ai nấy lo lâu năm hỏi một câu, mày biết tại sao cái thằng Nodejs, Redis là Single-Thread nhưng mà sao nó vẫn chạy nhanh như thế không. Thú thật là mình không biết, vào đọc mấy cái medium thì cũng k hiểu gì. Thôi thì tự code một cái event-loop , cũng là để hiểu event-loop nó hoạt động như thế nào.&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of contents:&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#mot-so-khai-niem"&gt;Một số khái niệm&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#file-descriptors-file-descriptor-table"&gt;File Descriptors / File Descriptor Table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#timer-callback"&gt;Timer / Callback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#libuv-eventloop"&gt;Libuv / Eventloop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#blocking-socket-server"&gt;Blocking Socket Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#non-blocking-socket-server"&gt;Non-Blocking Socket Server&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#co-ket-noi-moi-tu-client"&gt;Có kết nối mới từ client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#co-du-lieu-tu-ket-noi"&gt;Có dữ liệu từ kết nối:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#co-tin-hieu-hoi-ap-cho-client"&gt;Có tín hiệu hồi đáp cho client.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#libuv"&gt;LibUV&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="mot-so-khai-niem"&gt;Một số khái niệm&lt;/h2&gt;
&lt;p&gt;Nào cùng nhau tra cứu một số khái niệm, để hiểu được bài viết này, cảnh báo là nhiều chữ và nhiều code nên các bạn cứ thảnh thơi ra làm ấm trà, điếu thuốc rồi vào đọc cho nó thư thả.&lt;/p&gt;
&lt;h3 id="file-descriptors-file-descriptor-table"&gt;File Descriptors / File Descriptor Table&lt;/h3&gt;
&lt;p&gt;Trong linux có một câu nói khá nổi tiếng &lt;code&gt;Everything is a file&lt;/code&gt;, File ở đây có thể là.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;File &lt;em&gt;(Đương nhiên rồi)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Terminal I/O (stdin/stdout/stderr)&lt;/li&gt;
&lt;li&gt;pipe&lt;/li&gt;
&lt;li&gt;sockets&lt;/li&gt;
&lt;li&gt;device&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Khi một tiến trình được khởi chạy thì mặc định sẽ được truy cập đến 3 tài nguyên&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stdin&lt;/li&gt;
&lt;li&gt;stdout&lt;/li&gt;
&lt;li&gt;stderr&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Các tài nguyên này được lưu trong bảng gọi là &lt;strong&gt;File Descriptor Table&lt;/strong&gt; (&lt;code&gt;FDTable&lt;/code&gt;) với chỉ số (index) là File Descriptor(&lt;code&gt;FD&lt;/code&gt;)&lt;/p&gt;
&lt;table class="table-striped table table-hover"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;FD&lt;/th&gt;
&lt;th&gt;Pointer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;stdin pointer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;stdout pointer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;stderr pointer&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Nếu tiến trình này mở một file mới, thì file mới sẽ được add vào &lt;code&gt;FDTable&lt;/code&gt;, Tương tự khi tiến trình này mở 1 connection, một pipe, tất cả các tài nguyên này, đều là file, và được lưu ở &lt;code&gt;FDTable&lt;/code&gt;&lt;/p&gt;
&lt;table class="table-striped table table-hover"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;FD&lt;/th&gt;
&lt;th&gt;Pointer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;stdin pointer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;stdout pointer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;stderr pointer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;file pointer&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="timer-callback"&gt;Timer / Callback&lt;/h3&gt;
&lt;p&gt;Cùng nói qua một chút về &lt;code&gt;timer&lt;/code&gt; và &lt;code&gt;callback&lt;/code&gt; trong &lt;code&gt;javascipt&lt;/code&gt;. Chúng ta cùng xem xét đoạn code sau&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;setTimeout(function cb() {&lt;/span&gt;
&lt;span class="err"&gt;    console.log("callback")&lt;/span&gt;
&lt;span class="err"&gt;}, 5000)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;thì nodejs sẽ khởi tạo 1 &lt;code&gt;timer&lt;/code&gt;, sau khi &lt;code&gt;timer&lt;/code&gt;đó kết thúc, thì sẽ đẩy &lt;code&gt;callback&lt;/code&gt; vào &lt;code&gt;task queue&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="videobox"&gt;
&lt;video controls="" height="300" poster="None" preload="none" width="800"&gt;&lt;source src="images/09/timer3.mp4" type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'/&gt;&lt;/video&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id="libuv-eventloop"&gt;Libuv / Eventloop&lt;/h3&gt;
&lt;p&gt;Nhắc đến &lt;strong&gt;Event Loop&lt;/strong&gt; trong javascript thì chắc chẳng ai còn lạ gì nữa, nếu thấy lạ thì mời bạn xem video rất nổi tiếng sau đây:&lt;/p&gt;
&lt;p&gt;&lt;span class="videobox"&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="390" mozallowfullscreen="" src="https://www.youtube.com/embed/8aGhZQkoFbQ" webkitallowfullscreen="" width="640"&gt;
&lt;/iframe&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Libuv là gì, nó là thư viện để xử lý các vấn đề liên quan đến bất đồng bộ. Libuv là nền tảng của event-loop trong Nodejs. Video ở trên đã giải thích được nodejs tương tác với stack , task queue, event loop như thế nào. Bài viết này sẽ giải thích cách mà event loop hoạt đột. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;    libuv is a multi-platform support library with a focus on asynchronous I/O. &lt;/span&gt;
&lt;span class="err"&gt;    It was primarily developed for use by Node.js, but it's also used by Luvit, Julia, pyuv, and others.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="'Node JS System'" class="img-fluid" src="images/09/nodejs_system.png" title="'Node JS System'" width="500"/&gt;&lt;/p&gt;
&lt;p&gt;Để dễ hiểu hơn về cơ chế hoạt động của event-loop. hãy bắt đầu thử viết một event loop đơn giản, xử lý kết nối qua socket. Tôi sẽ đưa ra 2 ví dụ về 2 cách viết.&lt;/p&gt;
&lt;h2 id="blocking-socket-server"&gt;Blocking Socket Server&lt;/h2&gt;
&lt;figure class="code"&gt;
&lt;figcaption&gt;&lt;span class="liquid-tags-code-filename"&gt;blocking_socket.py&lt;/span&gt;&lt;a href="/code/09/blocking_socket.py"&gt;download&lt;/a&gt;&lt;/figcaption&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="n"&gt;EOL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;'Hello world'&lt;/span&gt;
&lt;span class="n"&gt;HOST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'127.0.0.1'&lt;/span&gt;  &lt;span class="c1"&gt;# The server's hostname or IP address&lt;/span&gt;
&lt;span class="n"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;65432&lt;/span&gt;        &lt;span class="c1"&gt;# The port used by the server&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;EOL&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-'&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-'&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/figure&gt;
&lt;p&gt;Nói đến lập trình socketsocket thì ví dụ trên là một chương trình socket điển hình. 
- Khởi tạo một socket server, lắng nghe ở port &lt;code&gt;654321&lt;/code&gt;. 
- Tạo một vòng lặp vô tận, chờ một kết nối đến
    - nhận dữ liệu từ client cho đến khi có kí tự &lt;code&gt;EOL&lt;/code&gt; trong nội dung.
    - Đóng kết nối và gửi lại client nội dung &lt;code&gt;Hello world&lt;/code&gt;
    - Tiếp tục một vòng lặp mới&lt;/p&gt;
&lt;p&gt;Nhưng vấn đề ở chương trình này là gì, đó là nó bị &lt;code&gt;blocking&lt;/code&gt; ở câu lệnh sau &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tại dòng lệnh này thì trình dịch python sẽ dừng chương trình lại, không xử lý gì cả, chờ đợt cho đến khi có một connection mới. Thuật ngữ thường được gọi là &lt;code&gt;blocking IO&lt;/code&gt;. Khi có dữ liệu mới từ client, chương trình tiếp tục xử lý và sau đó quay lại chu kì lặp và tiếp tục chờ đợi. Dẫn đến chương trình này chỉ làm việc được với tối đa 1 client trong 1 thời điểm, những client sau đó phải chờ cho đến khi client trước đó hoàn thành phiên làm việc mới được xử lý.&lt;/p&gt;
&lt;p&gt;Các bạn có thể xem demo chường trình này dưới đây, tôi cùng một lúc khởi tạo 2 client với id là &lt;code&gt;1&lt;/code&gt; và &lt;code&gt;2&lt;/code&gt; đến socket server. Mỗi client hoạt động theo logic như sau:
- Khởi tạo kết nối đến server
- Sau một khoảng thời gian nhất định, gửi 1 xâu có giá trị &lt;code&gt;hello from {client_id}&lt;/code&gt; đến server
- Sau 10 lần gửi thông điệp client sẽ gửi &lt;code&gt;EOL&lt;/code&gt; đến server&lt;/p&gt;
&lt;p&gt;Các bạn có thể thấy, server xử lý tuần tự 1 client trong 1 thời điểm, sau khi hoàn thành xử lý với &lt;code&gt;client 1&lt;/code&gt;, thì server mới tiếp tục làm việc với &lt;code&gt;client 2&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href="https://asciinema.org/a/OMX7Buub9ksUi9k7eLiUSK6g8"&gt;&lt;img alt="asciicast" class="img-fluid" src="https://asciinema.org/a/OMX7Buub9ksUi9k7eLiUSK6g8.svg"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class="code"&gt;
&lt;figcaption&gt;&lt;span class="liquid-tags-code-title"&gt;client.py&lt;/span&gt;&lt;a href="/code/09/client.py"&gt;download&lt;/a&gt;&lt;/figcaption&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SupportsInt&lt;/span&gt;


&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Process some integers.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"client_id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"store"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"inteval"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"store"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;inteval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inteval&lt;/span&gt;
&lt;span class="n"&gt;client_id&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client_id&lt;/span&gt;



&lt;span class="n"&gt;HOST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'127.0.0.1'&lt;/span&gt;  &lt;span class="c1"&gt;# The server's hostname or IP address&lt;/span&gt;
&lt;span class="n"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;65432&lt;/span&gt;        &lt;span class="c1"&gt;# The port used by the server&lt;/span&gt;


&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inteval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;'hello from &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;client_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;'hello from &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;: '&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;client_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;'Hello, world&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Received'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/figure&gt;
&lt;p&gt;Để giải quyết bài toán này thì mọi người thường nghĩ đến một giải pháp là &lt;code&gt;multithread&lt;/code&gt;, đây cũng là giải pháp thường được các thầy giáo hướng dẫn ở trong trường đại học. Mỗi khi có một kết nối đến server thì chương trình sẽ khởi tạo 1 thread mới, xử lý data được gửi đến từ client và trả lại dữ liệu cho client.&lt;/p&gt;
&lt;p&gt;Nhược điểm của phương pháp này nó là, mỗi thread sẽ có &lt;code&gt;call stack&lt;/code&gt; riêng, và việc chuyển đổi giữa các &lt;code&gt;call stack&lt;/code&gt; cũng ảnh hưởng tới hiệu năng của chương trình. Một cách khác để giải quyết vấn đề này đó chính là &lt;code&gt;non-blocking IO&lt;/code&gt;, nói một cách khác, chúng ta sẽ không bắt chương trình chờ cho đến khi có data nữa.&lt;/p&gt;
&lt;h2 id="non-blocking-socket-server"&gt;Non-Blocking Socket Server&lt;/h2&gt;
&lt;p&gt;&lt;img alt="'Epoll'" class="img-fluid" src="images/09/epoll.png" title="'Epoll'" width="500"/&gt;&lt;/p&gt;
&lt;p&gt;Để giải quyết bài toán trên mà không sử dụng đến &lt;code&gt;multithread&lt;/code&gt;, chúng ta cần sử dụng một &lt;code&gt;system call&lt;/code&gt; là &lt;code&gt;epoll&lt;/code&gt;. &lt;code&gt;epoll&lt;/code&gt; là 1 câu lệnh của hệ điều hành linux (&lt;code&gt;system call&lt;/code&gt;), đưa cho &lt;code&gt;epoll&lt;/code&gt; một hoặc nhiều &lt;code&gt;file descriptors&lt;/code&gt;, &lt;code&gt;epoll&lt;/code&gt; sẽ trả về cho chương trình những file nào có thể đọc được.&lt;/p&gt;
&lt;p&gt;Quay lại về bài toán lập trình socket. Để sử dụng &lt;code&gt;epoll&lt;/code&gt; thì chúng ta sẽ thay đổi logic như sau:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Khởi tạo một &lt;code&gt;socket&lt;/code&gt;, và &lt;code&gt;epoll&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Đăng kí &lt;code&gt;socket file descriptor&lt;/code&gt; cùng sự kiện &lt;code&gt;EPOLLIN&lt;/code&gt; vào trong &lt;code&gt;epoll&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Tại một vòng lặp vô tận:&lt;ul&gt;
&lt;li&gt;kiểm tra xem epoll có event mới nào không&lt;/li&gt;
&lt;li&gt;nếu có sự kiện mới thì xử lý sự kiện đó, và tiếp tục lặp&lt;/li&gt;
&lt;li&gt;nếu không thì tiếp tục quay lại vòng lặp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="'Epoll Flow'" class="img-fluid" src="images/09/epoll_flow.png" title="'Epoll Flow'" width="500"/&gt;&lt;/p&gt;
&lt;figure class="code"&gt;
&lt;figcaption&gt;&lt;span class="liquid-tags-code-title"&gt;lang:python&lt;/span&gt;&lt;span class="liquid-tags-code-filename"&gt;non_blocking_socket.py&lt;/span&gt;&lt;span class="liquid-tags-code-lines"&gt;[Lines 67-94]&lt;/span&gt;&lt;a href="/code/09/non_blocking_socket.py"&gt;download&lt;/a&gt;&lt;/figcaption&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;epoll_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EPOLLIN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setblocking&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IPPROTO_TCP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TCP_NODELAY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"Listening"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;connections&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{}&lt;/span&gt;


    &lt;span class="n"&gt;requests&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;server_fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;while&lt;/span&gt; &lt;span class="k"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;"waiting.."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fileno&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;server_fd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;init_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EPOLLIN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;receive_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EPOLLOUT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;send_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/figure&gt;
&lt;p&gt;Đối với mỗi loại event thì server sẽ xử lý bằng những hàm tương ứng, chúng ta cùng xem kỹ hơn cách server xử lý từng loại sự kiện.&lt;/p&gt;
&lt;h3 id="co-ket-noi-moi-tu-client"&gt;Có kết nối mới từ client&lt;/h3&gt;
&lt;p&gt;Khi kiểm tra &lt;code&gt;file descriptor&lt;/code&gt; của sự kiện mới là &lt;code&gt;socket server file descriptor&lt;/code&gt; chúng ta hiểu được rằng là đã có một kết nối đến server.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bởi vì kết nối cũng là 1 file, nên chúng ta sẽ đăng kí &lt;code&gt;fd&lt;/code&gt; của kết nối này vào trong &lt;code&gt;epoll&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Mỗi khi có dữ liệu mới đến từ kết nối này, &lt;code&gt;epoll&lt;/code&gt; sẽ tạo event mới cho chúng ta&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class="code"&gt;
&lt;figcaption&gt;&lt;span class="liquid-tags-code-title"&gt;lang:python :hideall:&lt;/span&gt;&lt;span class="liquid-tags-code-filename"&gt;non_blocking_socket.py&lt;/span&gt;&lt;span class="liquid-tags-code-lines"&gt;[Lines 26-38]&lt;/span&gt;&lt;a href="/code/09/non_blocking_socket.py"&gt;download&lt;/a&gt;&lt;/figcaption&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;init_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;server&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;int, socket.socket&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;int, bytes&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;int, bytes&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;epoll&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setblocking&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="ss"&gt;"New Connection: {addr}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EPOLLIN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/figure&gt;
&lt;h3 id="co-du-lieu-tu-ket-noi"&gt;Có dữ liệu từ kết nối:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Đọc dữ liệu từ kết nối&lt;/li&gt;
&lt;li&gt;Nếu kết nối bị ngắt, xóa &lt;code&gt;fd&lt;/code&gt; tương ứng khỏi &lt;code&gt;epoll&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Nếu có &lt;code&gt;EOL&lt;/code&gt; trong dữ liệu thì set event cho &lt;code&gt;fd&lt;/code&gt; trở thành &lt;code&gt;EPOLLOUT&lt;/code&gt;, tương ứng với việc thông báo cho chương trình là đã đọc hết dữ liệu từ client này, hãy hồi đáp về cho client&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class="code"&gt;
&lt;figcaption&gt;&lt;span class="liquid-tags-code-title"&gt;lang:python :hideall:&lt;/span&gt;&lt;span class="liquid-tags-code-filename"&gt;non_blocking_socket.py&lt;/span&gt;&lt;span class="liquid-tags-code-lines"&gt;[Lines 40-58]&lt;/span&gt;&lt;a href="/code/09/non_blocking_socket.py"&gt;download&lt;/a&gt;&lt;/figcaption&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;receive_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s s-Atom"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="nn"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s s-Atom"&gt;requests&lt;/span&gt; &lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s s-Atom"&gt;responses&lt;/span&gt; &lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nn"&gt;epoll&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s s-Atom"&gt;select&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;epoll&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;

    &lt;span class="s s-Atom"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s s-Atom"&gt;+=&lt;/span&gt; &lt;span class="s s-Atom"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"new updated {fileno} {requests[fileno]}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="s s-Atom"&gt;if&lt;/span&gt; &lt;span class="s s-Atom"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;QUIT&lt;/span&gt; &lt;span class="s s-Atom"&gt;or&lt;/span&gt; &lt;span class="s s-Atom"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;EMPTY&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;
        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;'[{:02d}] exit or hung up'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="s s-Atom"&gt;epoll&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unregister&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="s s-Atom"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="s s-Atom"&gt;del&lt;/span&gt; &lt;span class="s s-Atom"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s s-Atom"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s s-Atom"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="s s-Atom"&gt;elif&lt;/span&gt; &lt;span class="nv"&gt;EOL&lt;/span&gt; &lt;span class="s s-Atom"&gt;in&lt;/span&gt; &lt;span class="s s-Atom"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;
        &lt;span class="s s-Atom"&gt;epoll&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;modify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;select&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;EPOLLOUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="s s-Atom"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;][:-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"[{:02d}] says: {}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="s s-Atom"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;b'ACK\n'&lt;/span&gt;
        &lt;span class="s s-Atom"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;b''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/figure&gt;
&lt;h3 id="co-tin-hieu-hoi-ap-cho-client"&gt;Có tín hiệu hồi đáp cho client.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Gửi dữ liệu cho client&lt;/li&gt;
&lt;li&gt;Đổi loại event cho kết nối thành &lt;code&gt;EPOLLIN&lt;/code&gt;, để server tiếp lắng nghe dữ liệu mới trên kết nối này&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class="code"&gt;
&lt;figcaption&gt;&lt;span class="liquid-tags-code-title"&gt;lang:python :hideall:&lt;/span&gt;&lt;span class="liquid-tags-code-filename"&gt;non_blocking_socket.py&lt;/span&gt;&lt;span class="liquid-tags-code-lines"&gt;[Lines 59-64]&lt;/span&gt;&lt;a href="/code/09/non_blocking_socket.py"&gt;download&lt;/a&gt;&lt;/figcaption&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;send_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;int, socket.socket&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;int, bytes&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;epoll&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="ss"&gt;"""Send a response to a client."""&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;byteswritten&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;byteswritten:&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;modify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EPOLLIN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href="https://asciinema.org/a/DQcgHeBbIcy7AXU1lP5VKeMqr"&gt;&lt;img alt="asciicast" class="img-fluid" src="https://asciinema.org/a/DQcgHeBbIcy7AXU1lP5VKeMqr.svg"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="libuv"&gt;LibUV&lt;/h2&gt;
&lt;p&gt;&lt;img alt="'Epoll'" class="img-fluid" src="images/09/loop_iteration.png" title="'Epoll'" width="500"/&gt;&lt;/p&gt;
&lt;p&gt;Nói một cách đơn giản, Libuv chỉ là 1 vòng lặp.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Đầu tiên chương trình sẽ kiểm tra vòng lặp này có đang hoạt động hay không? Chương trình có handler nào hay không, có kết nối nào hay không&lt;/li&gt;
&lt;li&gt;Thực thi những &lt;code&gt;timer&lt;/code&gt; đã hết thời gian chờ. Khi một timer hết hạn, thì &lt;code&gt;callback&lt;/code&gt; của timer đó sẽ được đẩy vào queue&lt;/li&gt;
&lt;li&gt;Thực thi các &lt;code&gt;callback&lt;/code&gt; đang được pending trong &lt;code&gt;task queue&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Tính toán thời gian chờ (timeout) khi polling&lt;/li&gt;
&lt;li&gt;Chờ IO trong khoảng thời gian &lt;code&gt;timeout&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Kiểm tra &lt;code&gt;callback handler&lt;/code&gt; đã được thực thi hay chưa.&lt;/li&gt;
&lt;li&gt;Thực thi &lt;code&gt;close callbacks&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Programing"></category><category term="eventloop"></category><category term="epoll"></category><category term="socket"></category><category term="javascript"></category><category term="libuv"></category></entry><entry><title>Giải thích bài báo DEtection TRansformer</title><link href="https://deepmlml.com/End-t-End-transformer-classic-object-detection.html" rel="alternate"></link><published>2020-06-16T19:18:33+09:00</published><updated>2020-06-16T19:18:33+09:00</updated><author><name>h4cker</name></author><id>tag:deepmlml.com,2020-06-16:/End-t-End-transformer-classic-object-detection.html</id><summary type="html">&lt;p&gt;Giới thiệu bài toán Object Detection cổ điển, từ đó nắm bắt được ý tưởng của các thuật toán Deep Learing phức tạp hơn&lt;/p&gt;</summary><content type="html">&lt;p&gt;Từ trước đến nay bài toán object detection thường dựa vào các thuật toán thiết kế thủ công như Non-maximum Suppession, hay anchor generation để thiết kế mạng network. Bài báo này đưa ra một phương pháp mới mới gọi là "DEtection TRansformer" sử dụng kiến trúc transfomer để giải quyết bài toán object detection.&lt;/p&gt;
&lt;h3 id="mot-so-khai-niem"&gt;Một số khái niệm&lt;/h3&gt;
&lt;h4 id="hungarian-algotithm"&gt;Hungarian Algotithm&lt;/h4&gt;
&lt;h5 id="bai-toan"&gt;Bài toán&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;Một nhà máy có bốn nhân công thực hiện 4 công việc khác nhau trong&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;$$&lt;/p&gt;
&lt;p&gt;\left[&lt;/p&gt;
&lt;div class="math"&gt;\begin{array}{llll}
30 &amp;amp; 40 &amp;amp; 50 &amp;amp; 60 \\
70 &amp;amp; 30 &amp;amp; 40 &amp;amp; 70 \\
60 &amp;amp; 50 &amp;amp; 60 &amp;amp; 30 \\
20 &amp;amp; 80 &amp;amp; 50 &amp;amp; 70
\end{array}&lt;/div&gt;
&lt;p&gt;\right]&lt;/p&gt;
&lt;p&gt;$$&lt;/p&gt;
&lt;h3 id="kien-truc-mang-detr"&gt;Kiến trúc mạng DETR&lt;/h3&gt;
&lt;p&gt;&lt;img alt="'DETR'" class="img-fluid" src="images/08/network.png" title="'DETR'" width="1000"/&gt;&lt;/p&gt;
&lt;p&gt;Kiến trúc mạng DETR gồm 3 thành phần chính&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Backbone network&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tương tự như Faster RCNN, DETR sử dụng một mạng CNN để thu được &lt;code&gt;convolutional features&lt;/code&gt; của ảnh đầu vào. &lt;/p&gt;
&lt;p&gt;Với mỗi ảnh đầu vào có kích thước&lt;/p&gt;
&lt;p&gt;
&lt;div class="math"&gt;$$x_{\mathrm{img}} \in \mathbb{R}^{3 \times H_{0} \times W_{0}}$$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;thu được &lt;code&gt;convolutional features&lt;/code&gt; có kích thước &lt;/p&gt;
&lt;p&gt;
&lt;div class="math"&gt;$$f \in \mathbb{R}^{C \times H \times W} $$&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;trong đó &lt;span class="math"&gt;\(C=2048\)&lt;/span&gt; , &lt;span class="math"&gt;\(H, W=\frac{H_{0}}{32}, \frac{W_{0}}{32}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="'Fast RCNN'" class="img-fluid" src="images/rpn/step-1.png" title="'Fast RCNN'" width="400"/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Transformer encoder&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;Ở đây, tác giả sử dụng &lt;span class="math"&gt;\(1x1\)&lt;/span&gt; convolution để giảm chiều &lt;code&gt;convolutional features&lt;/code&gt; từ &lt;span class="math"&gt;\(C\)&lt;/span&gt; xuống &lt;span class="math"&gt;\(z_{0} \in \mathbb{R}^{d \times H \times W}\)&lt;/span&gt;. 
Bởi vì &lt;code&gt;encoder&lt;/code&gt; có đầu vào dạng &lt;code&gt;sequence&lt;/code&gt;, tại đây, &lt;code&gt;features&lt;/code&gt; được &lt;code&gt;flatten&lt;/code&gt; thành &lt;span class="math"&gt;\(z_{0} \in \mathbb{R}^{d \times HW}\)&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="'Fast RCNN'" class="img-fluid" src="images/08/step1.png" title="'Fast RCNN'" width="400"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="'Encoder-Decoder' | Hello" class="img-fluid" src="images/08/transformer.png" title="'Encoder-Decoder' | Hello" width="400"/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="loss-function"&gt;Loss Function&lt;/h3&gt;
&lt;p&gt;DETR cho ra output gồm N dự đoán &lt;/p&gt;
&lt;div class="math"&gt;$$y = N \times \left(c_{i} , b_{i}\right)$$&lt;/div&gt;
&lt;p&gt;với &lt;span class="math"&gt;\(c_{i}\)&lt;/span&gt; là xác suất  &lt;/p&gt;
&lt;div class="math"&gt;$$\hat{y} = N  \times \left(c_i , b_i\right)$$&lt;/div&gt;
&lt;div class="math"&gt;$$
\hat{\sigma}=\underset{\sigma \in \mathfrak{S}_{N}}{\arg \min } \sum_{i}^{N} \mathcal{L}_{\mathrm{match}}\left(y_{i}, \hat{y}_{\sigma(i)}\right)
$$&lt;/div&gt;
&lt;h4 id="hungarian-loss"&gt;Hungarian Loss&lt;/h4&gt;
&lt;div class="math"&gt;$$
\mathcal{L}_{\text {Hungarian }}(y, \hat{y})=\sum_{i=1}^{N}\left[-\log \hat{p}_{\hat{\sigma}(i)}\left(c_{i}\right)+\mathbb{1}_{\left\{c_{i} \neq \varnothing\right\}} \mathcal{L}_{\mathrm{box}}\left(b_{i}, \hat{b}_{\hat{\sigma}}(i)\right)\right]
$$&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Deep Learning"></category><category term="vietnamese"></category><category term="explained"></category><category term="object_detection"></category><category term="transfomer"></category></entry><entry><title>Bài toán Object Detection cổ điển</title><link href="https://deepmlml.com/classic-object-detection.html" rel="alternate"></link><published>2018-01-16T19:18:33+09:00</published><updated>2018-01-16T19:18:33+09:00</updated><author><name>h4cker</name></author><id>tag:deepmlml.com,2018-01-16:/classic-object-detection.html</id><summary type="html">&lt;p&gt;Giới thiệu bài toán Object Detection cổ điển, từ đó nắm bắt được ý tưởng của các thuật toán Deep Learing phức tạp hơn&lt;/p&gt;</summary><content type="html">&lt;p&gt;Nhiều năm về trước, bài toán object detection thường sử dụng những thuật toán đơn giản, tốc độ tính toán nhanh, nhưng bù lại độ chính xác không tốt như sử dụng deep learning. Mặc dù vậy, để hiểu rõ hơn về ý tưởng của các thuật toán phức tạp hơn, hôm nay mình muốn giới thiệu ý tưởng của 1 thuật toán cổ điển, sử dụng HOG. Mục đích của bài viết này chỉ là giới thiệu về ý tưởng của thuật toán , nên mình sẽ không code bài toán này. &lt;/p&gt;
&lt;h3 id="trich-xuat-thuoc-tinh"&gt;Trích xuất thuộc tính&lt;/h3&gt;
&lt;p&gt;Trích xuất thuộc tính(feature extraction) là một quá trình nhằm biến dữ liệu phức tạp đầu vào thành một cách biểu diễn dữ liệu đơn giản hơn, phù hợp hơn cho các thuật toán học máy. Dữ liệu sau khi xử lý đã được lược bỏ phần dữ liệu dư thừa, giữ lại những dữ liệu có ích cho bài toán cần xử lý.&lt;/p&gt;
&lt;p&gt;Trong bài toán object detection, đầu vào của dữ liệu là hình ảnh , vì thế để đơn giản hơn cho việc tính toán chúng ra sử dụng một số thuật toán để trích xuất như HOG, SIFT. Trong nội dung bài viết này, tôi không đi sâu về các thuật toán trích xuất dữ liệu này.&lt;/p&gt;
&lt;h3 id="histogram-of-oriented-gradients"&gt;Histogram of Oriented Gradients&lt;/h3&gt;
&lt;p&gt;Histogram of Oriented Gradients(HOG) là một thuật toán để trích xuất thuộc tính hình ảnh. Vậy cụ thể HOG có đầu ra như thế nào. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HOG chia hình ảnh đầu vào thành một lưới các ô vuông&lt;/li&gt;
&lt;li&gt;Mỗi ô vuông trích xuất thành một vector hướng của gradient trong cell đó&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img class="img-fluid right" src="images/06/hog_01.png" width="200"/&gt;&lt;/p&gt;
&lt;p&gt;Trích dẫn một ví dụ về đầu ra của HOG từ trang &lt;a href="http://scikit-image.org/docs/dev/auto_examples/features_detection/plot_hog.html"&gt;scikit-image.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="hehehe" class="img-fluid right" src="images/06/hog_02.png" title="hehehe" width="800"/&gt;&lt;/p&gt;
&lt;p&gt;Từ ví dụ trên ta có thể thấy, trích xuất thuộc tính bằng HOG bảo toàn thông tin về đường viền của đối tượng trong ảnh, làm mất đi các thông tin về màu sắc, giảm độ sắc nét của dữ liệu. &lt;/p&gt;
&lt;p&gt;Thông thường, đầu vào của một hình ảnh có kích thước &lt;span class="math"&gt;\(W x H x 3\)&lt;/span&gt; , đầu ra của HOG là vector 1-D &lt;span class="math"&gt;\(N x 1\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Đã có một bài viết tiếng Việt đề cập khá cụ thể về cách tính HOG feature từ &lt;a href="https://viblo.asia/p/tim-hieu-ve-hoghistogram-of-oriented-gradients-m68Z0wL6KkG"&gt;Viblo&lt;/a&gt;. Các bạn có thể tham khảo thêm&lt;/p&gt;
&lt;h3 id="sliding-window"&gt;Sliding Window&lt;/h3&gt;
&lt;p&gt;Sau khi đã có HOG feature descriptor, ta sẽ sử dụng vào bài toán object detector. Phần này tôi sẽ lược dịch từ trang &lt;a href="https://www.pyimagesearch.com/2014/11/10/histogram-oriented-gradients-object-detection/"&gt;pyimagesearch.com&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Lấy ra số lượng P các hỉnh ảnh chưa đối tượng và trích xuât HOG feature descriptor từ các hình ảnh này&lt;/li&gt;
&lt;li&gt;Lấy ra N các hình ảnh không chưa bất kì một đối tượng nào và trích xuất HOG feature descriptor từ các hình ảnh này. Trong thực tế thì &lt;span class="math"&gt;\(N &amp;gt;&amp;gt; P\)&lt;/span&gt; &lt;/li&gt;
&lt;li&gt;Huấn luyện mạng SVM trên các HOG feature descriptor trên tập dữ liệu từ bước một và bước 2&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Đối với mỗi hình ảnh trong tập không chứa đối tượng, sử dụng phương pháp sliding window, tại mỗi vị trí cửa sổ tính toán giá trị HOG và sử dụng mô hình SVM đã huấn luyện ở trên để dự đoán kết quả. Nếu mô hình đưa ra kết quả sai, lưu lại giá trị HOG tương ứng tại vị trí cửa sổ đó cùng xác suất được dự đoán&lt;/p&gt;
&lt;p&gt;&lt;img class="img-fluid right" src="images/06/sliding_window_example.gif" width="200"/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lấy các kết quả false-positive tìm thấy ở bước 4 , sắp xếp theo giá trị của xác suất và huấn luyện lại mô hình SVM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Kết thúc&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="loi-ket"&gt;Lời kết&lt;/h3&gt;
&lt;p&gt;Giải quyết bài toán object detection bằng các phương pháp cổ điển có ưu điểm là cần năng lực tính toán thấp, mô hình đơn giản, tốc độ xử lý nhanh. Nhưng trong quá trình xử lý làm mất đi nhiều thông tin giá trị của hình ảnh như màu sắc, độ sắc nét. Dẫn tới độ chính xác không cao.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Deep Learning"></category><category term="vietnamese"></category><category term="explained"></category><category term="object_detection"></category></entry><entry><title>Giải thích về mô hình Faster RCNN - Phần 1: RPN</title><link href="https://deepmlml.com/rpn-explained.html" rel="alternate"></link><published>2017-10-08T03:27:29+09:00</published><updated>2017-10-09T03:27:29+09:00</updated><author><name>h4cker</name></author><id>tag:deepmlml.com,2017-10-08:/rpn-explained.html</id><summary type="html">&lt;p&gt;Region Proposal Networks (RPNs)&lt;/p&gt;</summary><content type="html">&lt;h3 id="gioi-thieu-ve-faster-rcnn"&gt;Giới thiệu về Faster RCNN&lt;/h3&gt;
&lt;p&gt;Faster RCNN là một thuật toán để tìm kiếm vị trí của vật thể trong ảnh. Thuật toán này sẽ có đầu ra là những hình hộp, cùng với vật thể bên trong hộp đó là gì. Phiên bản đầu tiên của Faster RCNN là RCNN, với nguyên lý khá đơn giản. &lt;/p&gt;
&lt;p&gt;&lt;a href="/rpn-explained-code-pytorch.html"&gt;Phần 2: Giải thích RCNN bằng Pytorch&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h4 id="rcnn"&gt;RCNN&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Tác giả sử dụng một thuật toán gọi là selective search để đưa ra các bounding boxes, hay còn gọi là region proposals, chứa các vùng có thể có vật thể ở trong. &lt;/li&gt;
&lt;li&gt;Sử dụng các mạng đã được huấn luyện sẵn như Alex-net, VGG-16 để tính toán feed-forward các regions thu được convolutional features của mỗi region, sau đó huấn luyện SVM để xác định được vật thể nào được chứa trong region proposal đó. &lt;/li&gt;
&lt;li&gt;Sử dụng Linear Regression để hiệu chỉnh các giá trị ( vị trí các đỉnh) của region proposer &lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="fast-rcnn"&gt;Fast RCNN&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Sử dụng các mạng huấn luyện sẵn để feed-forward các region proposals, sẽ tốn nhiều thời gian bởi với mỗi ảnh thuật toán selective search sẽ cho ra hàng nghìn region proposals. &lt;/li&gt;
&lt;li&gt;Tác giả sẽ chỉ feed-forward một lần đối với ảnh gốc, thu được convolutional features của ảnh đó. Ví dụ với một hình ảnh có kích thước &lt;span class="math"&gt;\(600 * 600 * 3\)&lt;/span&gt;, ta sẽ thu được convolutional features với kích thước &lt;span class="math"&gt;\(37 * 37 * 512\)&lt;/span&gt;. Kích thước của features bị giảm nhỏ khoảng 16 lần &lt;span class="math"&gt;\(\frac{600}{37}\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Dựa vào kích thước cùng vị trí của các region proposals đối với ảnh gốc, ta sẽ tính toán được vị trí của region proposal trong convolutional features.&lt;/li&gt;
&lt;li&gt;Sửa dụng giá trị convolutional faetures của region proposal, ta dự đoán được vị trí các đỉnh của bounding box cũng như vật thể nằm trong bounding box là gì.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="'Fast RCNN'" class="img-fluid" src="images/rpn/fast_rcnn.png" title="'Fast RCNN'" width="600"/&gt;&lt;/p&gt;
&lt;p&gt;Source: https://www.slideshare.net/simplyinsimple/detection-52781995.&lt;/p&gt;
&lt;p&gt;Đối với Fast RCNN , do chia sẻ tính toán giữa các region trong ảnh, tốc độ thực thực thi của thuật toán đã được giảm từ 120s mỗi ảnh xuống 2s. Phần tính toán gây ra nghẽn chính là phần đưa ra các region proposal đầu vào, chỉ có thể thực thi tuần tự trên CPU. Faster RCNN giải quyết vấn đề này bằng cách sử dụng DNN để tính toán các region proposals này.&lt;/p&gt;
&lt;h3 id="rpn"&gt;RPN&lt;/h3&gt;
&lt;p&gt;RPN giải quyết các vấn đề trên bằng cách huấn luyện mạng neural network để đảm nhận thay vai trò của các thuật toán như selective search vốn rất chậm chạp.&lt;/p&gt;
&lt;p&gt;Một Region Proposal Network nhận đầu vào là ảnh với kích thước bất kì và cho đầu ra là region proposal (tập vị trí của các hình chữ nhật có thể chứa vật thể), cùng với xác suất chứa vật thể của hình chữ nhật tương ứng.&lt;/p&gt;
&lt;hr/&gt;
&lt;h4 id="cau-truc"&gt;Cấu trúc&lt;/h4&gt;
&lt;p&gt;Cách hoạt động RPN có 2 bước chính&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Feed-forward ảnh qua DNN thu được convolutional features.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Trong bài báo gốc, tác giả đã nhắc đến nhiều các mạng Convolution Network có sẵn như VGG-16, ZFNet, để dễ dàng cho việc giải thích, chúng ta sẽ lấy ví dụ ở đây là mạng VGG-16. &lt;/p&gt;
&lt;p&gt;Mạng VGG-16 chứa 13   convolutions layer kích thước &lt;span class="math"&gt;\(3 \times 3\)&lt;/span&gt; cùng với 5  max pooling layer kích thước &lt;span class="math"&gt;\(2 \times 2\)&lt;/span&gt;. Khi đầu vào là một ảnh có kích thước &lt;span class="math"&gt;\(3 \times W \times H\)&lt;/span&gt; , đầu ra sẽ nhận được &lt;span class="math"&gt;\(3 \times W^{'} \times H^{'}\)&lt;/span&gt; với &lt;span class="math"&gt;\(W^{'} = \frac{W}{16}\)&lt;/span&gt; &lt;span class="math"&gt;\(H^{'} = \frac{H}{16}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="'Fast RCNN'" class="img-fluid" src="images/rpn/step-1.png" title="'Fast RCNN'" width="600"/&gt;&lt;/p&gt;
&lt;p&gt;Source: https://www.quora.com/How-does-the-region-proposal-network-RPN-in-Faster-R-CNN-work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Sử dụng một cửa sổ trượt lên convolutional features .&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="'RPN'" class="img-fluid" src="images/rpn/rpn.png" title="'RPN'" width="600"/&gt;&lt;/p&gt;
&lt;p&gt;Để tạo ra region proposals, chúng ta sử dụng một network hay còn gọi là cửa sổ trượt (sliding-window) kích thước &lt;span class="math"&gt;\(n \times n\)&lt;/span&gt; trượt trên convolutional features. Đầu ra của network này là đầu vào của 2 fully-connected layer dự đoán vị trí của regions (box-regression layer), cũng như xác suất chứa object(box-classification) của hộp ấy. Tại mỗi vị trí của cửa sổ trượt chúng ta dự đoán đồng thời nhiều nhiều region proposal cùng một lúc, với &lt;span class="math"&gt;\(k\)&lt;/span&gt; là số proposal tương ứng với mỗi vị trí. Vậy &lt;span class="math"&gt;\(reg\)&lt;/span&gt; layer có &lt;span class="math"&gt;\(4k\)&lt;/span&gt; đầu ra dự đoán vị trí của &lt;span class="math"&gt;\(k\)&lt;/span&gt; proposal,  &lt;span class="math"&gt;\(cls\)&lt;/span&gt; layer chứa &lt;span class="math"&gt;\(2k\)&lt;/span&gt; đầu ra dự đoán xác suất chứa vật thể của proposal.&lt;/p&gt;
&lt;p&gt;Source: https://www.quora.com/How-does-the-region-proposal-network-RPN-in-Faster-R-CNN-work.&lt;/p&gt;
&lt;p&gt;Tại sao phải tạo ra những anchors này. Theo cách hiểu của bản thân tôi thì, trong bài toán xác định vị trí vật thể, số lượng đầu ra của mỗi ảnh là khác nhau. Ví dụ một bức ảnh có thể có 2 vật thể, một bức ảnh khác có 4 vật thể. Vì số lượng output là không cố định ta phải dựa vào các anchor để cố định hóa số lượng output này. &lt;/p&gt;
&lt;p&gt;Đối với mỗi bức ảnh, ta đều sinh ra các anchors tương ứng phụ thuộc vào kích cỡ của ảnh đó, bằng cách tính giá trị overlap của anchors với ground truth boxes, ta có thể xác định được anchors đó là positive hay negative. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;RPN (&lt;/span&gt;
&lt;span class="err"&gt;(features): Sequential (&lt;/span&gt;
&lt;span class="err"&gt;    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))&lt;/span&gt;
&lt;span class="err"&gt;    (1): ReLU (inplace)&lt;/span&gt;
&lt;span class="err"&gt;    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))&lt;/span&gt;
&lt;span class="err"&gt;    (3): ReLU (inplace)&lt;/span&gt;
&lt;span class="err"&gt;    (4): MaxPool2d (size=(2, 2), stride=(2, 2), dilation=(1, 1))&lt;/span&gt;
&lt;span class="err"&gt;    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))&lt;/span&gt;
&lt;span class="err"&gt;    (6): ReLU (inplace)&lt;/span&gt;
&lt;span class="err"&gt;    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))&lt;/span&gt;
&lt;span class="err"&gt;    (8): ReLU (inplace)&lt;/span&gt;
&lt;span class="err"&gt;    (9): MaxPool2d (size=(2, 2), stride=(2, 2), dilation=(1, 1))&lt;/span&gt;
&lt;span class="err"&gt;    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))&lt;/span&gt;
&lt;span class="err"&gt;    (11): ReLU (inplace)&lt;/span&gt;
&lt;span class="err"&gt;    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))&lt;/span&gt;
&lt;span class="err"&gt;    (13): ReLU (inplace)&lt;/span&gt;
&lt;span class="err"&gt;    (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))&lt;/span&gt;
&lt;span class="err"&gt;    (15): ReLU (inplace)&lt;/span&gt;
&lt;span class="err"&gt;    (16): MaxPool2d (size=(2, 2), stride=(2, 2), dilation=(1, 1))&lt;/span&gt;
&lt;span class="err"&gt;    (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))&lt;/span&gt;
&lt;span class="err"&gt;    (18): ReLU (inplace)&lt;/span&gt;
&lt;span class="err"&gt;    (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))&lt;/span&gt;
&lt;span class="err"&gt;    (20): ReLU (inplace)&lt;/span&gt;
&lt;span class="err"&gt;    (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))&lt;/span&gt;
&lt;span class="err"&gt;    (22): ReLU (inplace)&lt;/span&gt;
&lt;span class="err"&gt;    (23): MaxPool2d (size=(2, 2), stride=(2, 2), dilation=(1, 1))&lt;/span&gt;
&lt;span class="err"&gt;    (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))&lt;/span&gt;
&lt;span class="err"&gt;    (25): ReLU (inplace)&lt;/span&gt;
&lt;span class="err"&gt;    (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))&lt;/span&gt;
&lt;span class="err"&gt;    (27): ReLU (inplace)&lt;/span&gt;
&lt;span class="err"&gt;    (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))&lt;/span&gt;
&lt;span class="err"&gt;    (29): ReLU (inplace)&lt;/span&gt;
&lt;span class="err"&gt;    (30): MaxPool2d (size=(2, 2), stride=(2, 2), dilation=(1, 1))&lt;/span&gt;
&lt;span class="err"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;(conv1): Conv2d (&lt;/span&gt;
&lt;span class="err"&gt;    (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))&lt;/span&gt;
&lt;span class="err"&gt;    (relu): ReLU (inplace)&lt;/span&gt;
&lt;span class="err"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;(score_conv): Conv2d (&lt;/span&gt;
&lt;span class="err"&gt;    (conv): Conv2d(512, 18, kernel_size=(1, 1), stride=(1, 1))&lt;/span&gt;
&lt;span class="err"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;(bbox_conv): Conv2d (&lt;/span&gt;
&lt;span class="err"&gt;    (conv): Conv2d(512, 36, kernel_size=(1, 1), stride=(1, 1)))&lt;/span&gt;
&lt;span class="err"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="anchors"&gt;Anchors&lt;/h4&gt;
&lt;p&gt;&lt;img alt="'RPN'" class="img-fluid" src="images/rpn/anchors.png" title="'RPN'" width="600"/&gt;&lt;/p&gt;
&lt;p&gt;Sau khi đã có đầu ra của các region proposal, chúng ta sẽ tìm hiểu về khái niệm anchors. Tại mỗi vị trí của sliding window trên convolutional features, chúng ta tạo ra &lt;span class="math"&gt;\(k\)&lt;/span&gt; anchors tương ứng ở hình ảnh gốc. Trong bài báo, tác giả sử dụng 1 hình vuông, 2 hình chữ nhật với tỉ lệ chiều rộng, chiều dài là 1-2, 2-1, cùng với 3 kích cỡ khác nhau, như vậy &lt;span class="math"&gt;\(k = 3 \times 3 = 9\)&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;Các anchors này sẽ được gán mác là positive hoặc negative dựa vào diện tích overlap với ground truth box theo luật như sau.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Các anchor được phân loại là positive nếu&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Là anchor có  tỉ lệ diện tích chồng chéo trên diện tích chồng chập (Intersection-over-
Union - viết tắt IoU) overlap lớn nhất với một ground truth box.&lt;/li&gt;
&lt;li&gt;Là anchor có  tỉ lệ IoU với một ground truth lớn hơn 0.7&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Các anchor được phân noại là negative nếu có giá trị IoU bé hơn 0.3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Các anchor không thỏa mãn 2 điều kiện nêu trên thì bỏ qua. Không được đánh giá trong quá trình training object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tại sao phải tạo ra những anchors này&lt;/strong&gt;. Câu trả lời gồm 2 nguyên nhân chính&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Dựa phân loại của anchor, để dự đoán xác suất chứa vật thể của các region proposal&lt;/li&gt;
&lt;li&gt;Dựa vào khoảng cách từ anchor đến ground truth box, để dự đoán vị trí của bounding box. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Từ đây ta xác định được tiêu đầu ra của &lt;em&gt;box-regression layer&lt;/em&gt; và &lt;em&gt;box-classification&lt;/em&gt; được nhắc tới ở phần cấu trúc mạng RPN. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Box-classification dự đoán xác suất chứa vật thể của &lt;span class="math"&gt;\(k\)&lt;/span&gt; region proposal, tương ứng với &lt;span class="math"&gt;\(k\)&lt;/span&gt; anchor tại từng vị trí của sliding-window.&lt;/li&gt;
&lt;li&gt;Box-regression dự đoán khoảng cách tư anchor đến ground truth box tương ứng.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="loss-function"&gt;Loss function&lt;/h3&gt;
&lt;p&gt;Loss function sẽ được định nghĩa theo công thức sau &lt;/p&gt;
&lt;div class="math"&gt;$$
L(\{ p_i \}, \{ t_i \}) = \frac{1}{N_{cls}} \sum_{i} L_{cls} (p_i, p_i^{*}) + \lambda \frac{1}{N_{reg}} \sum_{i} p_i^{*} L_{reg}(t_i, t_i^{*})
$$&lt;/div&gt;
&lt;p&gt;
Với &lt;span class="math"&gt;\(i\)&lt;/span&gt; là index của anchor trong mini-batch và &lt;span class="math"&gt;\(p_i\)&lt;/span&gt; là xác suất dự đoán của anchor &lt;span class="math"&gt;\(i\)&lt;/span&gt; là một đối tượng. Giá trị nhãn ground-truth &lt;span class="math"&gt;\(p_i^{*}\)&lt;/span&gt; là một nếu anchor là positive, và là không khi anchor là negative.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(t_i\)&lt;/span&gt;  là một vector 4 chiều biểu diễn giá trị tọa độ của bounding box đã được dự đoán. &lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(t_i^{*}\)&lt;/span&gt; là vector 4 chiều biểu diễn giá trị tọa độ của ground-truth box tương ứng với positive anchor.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(L_{cls}\)&lt;/span&gt; là log loss của 2 class (object và non-object) &lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(L_{reg}\)&lt;/span&gt; dùng SmoothL1Loss&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="cong-thuc-tinh-smooth-l1"&gt;Công thức tính Smooth L1&lt;/h4&gt;
&lt;div class="math"&gt;$$
loss(x, y) = \sum \begin{cases} 
        0.5 * (x_i - y_i)^2, if |x_i - y_i| &amp;lt; 1 \\  
        |x_i - y_i| - 0.5,   otherwise   
        \end{cases} \quad
$$&lt;/div&gt;
&lt;figure class="code"&gt;
&lt;figcaption&gt;&lt;span class="liquid-tags-code-title"&gt;anchor_target_layer.py&lt;/span&gt;&lt;span class="liquid-tags-code-lines"&gt;[Lines 208-227]&lt;/span&gt;&lt;a href="/code/rpn/anchor_target_layer.py"&gt;download&lt;/a&gt;&lt;/figcaption&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="n"&gt;bbox_targets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_compute_targets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;anchors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gt_boxes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;argmax_overlaps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:])&lt;/span&gt;

    &lt;span class="n"&gt;bbox_inside_weights&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inds_inside&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;bbox_inside_weights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TRAIN&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RPN_BBOX_INSIDE_WEIGHTS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;bbox_outside_weights&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inds_inside&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TRAIN&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RPN_POSITIVE_WEIGHT&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# uniform weighting of examples (given non-uniform sampling)&lt;/span&gt;
        &lt;span class="n"&gt;num_examples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;positive_weights&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;num_examples&lt;/span&gt;
        &lt;span class="n"&gt;negative_weights&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;num_examples&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TRAIN&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RPN_POSITIVE_WEIGHT&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TRAIN&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RPN_POSITIVE_WEIGHT&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;positive_weights&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TRAIN&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RPN_POSITIVE_WEIGHT&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;
                            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;negative_weights&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TRAIN&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RPN_POSITIVE_WEIGHT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;
                            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;bbox_outside_weights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;positive_weights&lt;/span&gt;
    &lt;span class="n"&gt;bbox_outside_weights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;negative_weights&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;bbox_inside_weights&lt;/code&gt; tương ứng với giá trị nhãn &lt;span class="math"&gt;\(p_{i}^{*}\)&lt;/span&gt; có giá trị bằng một khi anchor tương ứng là positive anchors
&lt;code&gt;bbox_outside_weights&lt;/code&gt;  là hệ số để cân bằng giữa positive anchor và negative anchors  và đã nhân với giá trị  &lt;span class="math"&gt;\(\frac{1}{N_{reg}}\)&lt;/span&gt; . Trong cấu hình đưa ra bởi tác giả thì &lt;code&gt;TRAIN.RPN_POSITIVE_WEIGHT = -1&lt;/code&gt;. Lúc này giá trị hệ số là bằng nhau.
Định ngĩa của loss function&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;layer {&lt;/span&gt;
&lt;span class="err"&gt;  name: "rpn_loss_bbox"&lt;/span&gt;
&lt;span class="err"&gt;  type: "SmoothL1Loss"&lt;/span&gt;
&lt;span class="err"&gt;  bottom: "rpn_bbox_pred"&lt;/span&gt;
&lt;span class="err"&gt;  bottom: "rpn_bbox_targets"&lt;/span&gt;
&lt;span class="err"&gt;  bottom: 'rpn_bbox_inside_weights'&lt;/span&gt;
&lt;span class="err"&gt;  bottom: 'rpn_bbox_outside_weights'&lt;/span&gt;
&lt;span class="err"&gt;  top: "rpn_loss_bbox"&lt;/span&gt;
&lt;span class="err"&gt;  loss_weight: 1&lt;/span&gt;
&lt;span class="err"&gt;  smooth_l1_loss_param { sigma: 3.0 }&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="loi-ket"&gt;Lời kết&lt;/h3&gt;
&lt;p&gt;Tôi đã gặp khó khăn rất nhiều khi tìm hiểu lý thuyết cũng như cách huấn luyện mạng Faster RCNN. Bài viết này nhằm chia sẻ những điều tôi đã học được cũng như cách tôi đã viết lại Faster RCNN bằng pytorch như thế nào. 
Bạn có thể tham khảo tại github của tôi. &lt;a href="https://github.com/anhlt/faster_rcnn"&gt;pytorch faster rcnn&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="trich-dan"&gt;Trích Dẫn&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.quora.com/How-does-RPN-work-on-the-Faster-R-CNN?no_redirect=1" title="How-does-RPN-work-on-the-Faster-R-CNN"&gt;"How-does-RPN-work-on-the-Faster-R-CNN"&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Deep Learning"></category><category term="RPN"></category><category term="faster_rcnn"></category><category term="vietnamese"></category><category term="explained"></category></entry><entry><title>Giới thiệu về blog</title><link href="https://deepmlml.com/gioi-thieu-ve-blog.html" rel="alternate"></link><published>2017-10-04T19:25:12+09:00</published><updated>2017-10-04T19:25:12+09:00</updated><author><name>h4cker</name></author><id>tag:deepmlml.com,2017-10-04:/gioi-thieu-ve-blog.html</id><summary type="html"></summary><content type="html">&lt;h4 id="loi-gioi-thieu"&gt;Lời giới thiệu&lt;/h4&gt;
&lt;p&gt;Chào mọi người, tôi là một &lt;em&gt;kĩ sư&lt;/em&gt; đang sống và làm việc tại Nhật Bản, tôi có một cô bạn gái ở Việt Nam. Chúng tôi đã yêu nhau được hơn 4 năm, và quyết định làm đám cưới vào cuối năm này. Yêu xa ắt hẳn đã bất tiện, yêu xa để chuẩn bị cưới còn nhiều bất tiện hơn. Vì thế tôi viết blog này, chia sẻ cùng các bạn những khó khăn, kinh nghiệm mà tôi đã trải qua, từ khi bắt đầu học deep learning cũng như tập tễnh bước chấn vào tìm hiểu về computer vision. &lt;/p&gt;
&lt;p&gt;Nội dung chủ yếu của blog này, sẽ là những vấn đề cùng mọi người sẽ gặp phải khi training các bài toán. Tôi sẽ cố gắng chia sẻ kinh nghiệm của tôi khi re implement các paper, cách xử lý, debug khi mô hình không hoạt động đúng đắn.&lt;/p&gt;
&lt;p&gt;Gần đây tôi đang tự implement lại mô hình Faster RCNN, vì thế những bài đầu tiên về blog này sẽ viết về mô hình Faster RCNN.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Xin được lưu ý, tôi không phải là người nghiên cứu về deep learning. Tôi tốt nghiệp đại học CNTT ở Việt Nam. Sau đó đi làm luôn, tôi chỉ dành thời gian tìm hiểu deep learning trong lúc rảnh rỗi, hoặc cãi nhau với vợ sắp cưới của tôi, mọi kiến thức tôi chia sẻ ở blog này không đảm bảo hoàn toàn được tính đúng đắn.&lt;/strong&gt; &lt;/p&gt;
&lt;h4 id="hien-thi-latex-tren-blog"&gt;Hiển thị Latex trên blog&lt;/h4&gt;
&lt;p&gt;Bạn có thể sử dụng extension TamperMonkey, GeaseMonkey và cài đặt 
&lt;a href="https://gist.githubusercontent.com/goatandsheep/c8bf7b4ae448e76208a0/raw/76d36877a82d34fccf6e17e63c3db3cbef3712c8/Texify-Mathjax.js"&gt;Texify the World&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hoặc cài đặt &lt;a href="http://thewe.net/tex/"&gt;TexTheWorld Chrome Extension&lt;/a&gt;. Nếu cài đặt đúng đắn, bạn sẽ thấy được biểu thức dưới đây.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[; e^{\pi i}+1=0 ;]&lt;/code&gt;&lt;/p&gt;
&lt;h4 id="youtube"&gt;Youtube&lt;/h4&gt;
&lt;p&gt;&lt;span class="videobox"&gt;
&lt;iframe allowfullscreen="" frameborder="0" height="390" mozallowfullscreen="" src="https://www.youtube.com/embed/hTWKbfoikeg" webkitallowfullscreen="" width="640"&gt;
&lt;/iframe&gt;
&lt;/span&gt;&lt;/p&gt;</content><category term="General"></category><category term="intro"></category></entry></feed>